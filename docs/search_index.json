[["final-report.html", "Chapter 14 Final Report 14.1 Introduction 14.2 Methods/Analysis", " Chapter 14 Final Report 14.1 Introduction Sales negotiations over Internet-enabled live-chat portals are increasingly common in B2C durable product sales, but little is known about sales agent effectiveness in this context. Drawing from theories of scarcity and information processing, this study conceptualizes three sales agent tactics— concession tactic, delay tactic, and value affirmation tactic—that interact to enhance the likelihood of closing sales. Unique live-chat data and archival performance data before Covid (i.e., 2017) from a national home appliance retailer were employed to develop a validated corpus of textual cues to capture sales–agent closing tactics and test the proposed hypotheses. Three tactics—the concession tactic, the value affirmation tactic, and the delay tactic—are key features of this theory that are interrelated with the heuristic processing mechanism. The concession tactic is defined as an agent’s offer or counter-offer to a customer’s bargaining request, along with other incentives to close the sale. For example, the salespeople will say:“I can give you $30 off”. It is measured as a dummy variable 0 or 1 since the concession amount tend to be fairly small (e.g., $30 off on major home appliance with averages about $600). The value affirmation tactic is defined as an agent’s restatement of existing or advertised benefits to emphasize the perceived value of the purchase. For example, the salespeople will say:“the original price is $XXX, the sales price is $xxx, you are saving a lot!” or ” the washer has wrinkle free cleaning technology which brings your clothes like new”. It is measured as the percentage of the value affirmation tactic words out of the total salespeople words. The delay tactic is defined as the time elapsed between the consumer’s bargaining request and the agent’s concession tactic or value affirmation tactic. It is measured as the actual time elapsed. The research question is that what are the effective or ineffective combination of tactics on live chat sales closing with bargaining consumers. 14.1.1 Hypothesis: H1: The concession tactic increases the likelihood of closing sales in bargaining during live chats between customers and sales agents. H2: The delay tactic will positively moderate the concession tactic’s positive effect on the likelihood of a sales closing in bargaining live chats. H3: The value affirmation tactic diminishes the positive effect of the concession tactic on the likelihood of closing the sale in bargaining live chats. 14.1.2 Data Background I collaborated with a Fortune 500 national retailer to test the proposed framework with home appliance sales live chats (N = 975). The retailer was one of the top-three players in home appliance retailing when the data was collected. The retailer maintains a mix of online and in-store salespeople. Based on the research objective, I focused solely on live-chat salespeople. The retailer started conducting sales negotiations over live chat due to the shift from a traditional brick-and-mortar store to more online shopping. With e-retailing over big-ticket items becoming more of a trend, the retailer has formed a specialized home appliance live-chat sales team aiming to close more home appliance and extended warranty sales online. Home appliances account for a major part of the retailer’s business (more than 50%). 14.1.2.1 Sampling The following sampling criteria were used to meet the research objective. (1) Salesperson and consumer live chat exchanged during B2C sales negotiations for 10 months in 2017 and one month in 2016. I was advised to remove the period including major holiday seasons—Thanksgiving and Christmas (i.e., November, and December)—to ensure the results were generalizable for most of the time. In addition, the promotion and policy are also substantively different during those two months per the managers’ interview. (2) The chats need to take place at a later stage in the consumer decision journey (i.e., a specific product is discussed at the beginning of the live-chat sales interaction), since my dependent variable is objective sales closings. The chats in the early stages cannot be closed during the chat or within a few days (usually captured by the system using browser cookies). (3) New product purchase: The chats must be sales rather than service chats or products from a prior purchase, such as negotiating for better compensation. Thus, the returned and exchanged related items are excluded. Since my objective is to increase sales closings rather than satisfaction, I require the sales chats. (5) The chats must contain the bargaining requests during the interactions—types of bargaining chats to be included and excluded in the study (e.g., not price matching type, not related to extended warranty bargaining, not initiated by the agent). The reason for excluding the price matching type is that it is hard to differentiate it from the retailer’s specific policy. They also are less generalizable to other contexts. 14.1.2.2 Unit of Analysis Individual live chat is the unit of analysis—more specifically, the bargaining episode within the chat (i.e., after the consumer’s first bargaining request and before the order placement if the chat ends with a closed order). 14.2 Methods/Analysis Since the live chats are nested within salespeople (i.e., a salesperson can have more than one chat during the period) and the outcome is a 0/1 dummy variable of actual order placement, I will use a generalized mixed model (i.e., logistic regression) with random effects to test the hypotheses. The agent ID is considered as random effect since I am not interested in any specific agent. They are random samples of larger group of agents. 14.2.1 Empirical Analysis The chats’ sales outcome—closed or not closed—is represented by a binary choice that violates the assumption of the homoskedasticity of variance. Thus, an MLE probit/logit will be more appropriate. Moreover, the nested data structure (i.e., chats are nested within a salesperson) may lead to serial correlation in the error term and produce biased estimates if using traditional probit/logit regression. Raudenbush and Anthony (2002) advocate the use of the hierarchical linear model (HLM) to account for the nested structure of the data by modeling within- and between- salesperson variances. The mixed-effects model I employ in this study assumes that the two types of variations in effect sizes can be explained by the type of chat interaction variables, as well as other salesperson characteristics. Thus, my model is as follows: #math syntax #https://www.statpower.net/Content/310/R%20Stuff/SampleMarkdown.html #??? How to display into multiple lines? #??? I cannot knit it to specific folder Level 1 specification (i.e., each chat under the salesperson) \\(Logit(PrY_{ij} = 1|X_{ij}) = log\\frac{(PrY_{ij} = 1|X_{ij})} {(1-PrY_{ij} = 1|X_{ij})}\\) \\(\\eta_{ij} = \\beta_{0j} + \\beta_{1}Concession_{ij} + \\beta_{2}Delay_{ij} + \\beta_{3}ValueAffirm_{ij} + \\beta\\_{4}Concession\\_Delay\\_{ij} + \\beta\\_{5}Concession\\_ValueAffirm\\_{ij} + \\beta_{6}DRT_{ij} + \\beta_{7}CBMind_{ij} + \\beta_{8j}MCB_{ij} + \\beta_{9}Altermode_{ij} + \\beta_{10}Drcls_{ij} + \\beta_{11}LSM_{ij} + \\beta_{12}Deny_{ij} + \\epsilon\\_{ij}\\) where subscript (i) is the chat nested within salespeople (j). “DlvrD” is the concession tactic, “Delay” is the delay tactic, “ValueAffirm” is the value affirmation tactic, “DRT” is the chat duration, “CBMind” is the consumer’s bargaining mindset, “MCB” is the consumers’ multiple distinct requests for bargaining, “Altermode” is the consumer’s alternative mode of communication, “Drcls” is the salespeople’s direct closing tactic, “LSM” is linguistic style matching, and “Deny” is the salespeople’s deny tactic. The descriptive statistics can be found in Table 5. The Level 1 equation describes the impact of chat interaction measures, whereas the Level 2 equation describes the effect of salesperson characteristics on the intercept in the Level 1 equation. Consequently, my model follows: Intercept-as-outcome Model: \\(\\beta_{0j} = \\gamma_{00} + \\gamma_{01}HAChatcnt_j +_ \\gamma{02}Team_j + u\\_{0j} \\$ \\$ u\\_{0j} \\sim N(0,\\tau\\_{00})\\) #??? should I model it as 1|AgentName + HAChatcnt + Team? “HAchatcnt” is salespeople’s experience with home appliance chats. “Team” is the salespeople’s team status (home appliance or non-home appliance team). Since cross-level interaction is not the research interest, I do not use the random coefficient specification. I checked for multicollinearity using VIF. The results demonstrate that the interaction term of delay tactic and concession tactic has a high VIF (close to 10). I first tried to drop additional noncritical variables, but the procedure did not decrease the VIF. Accordingly, I followed the residual centering procedure recommended in (Lance 1988; De Jong, De Ruyter, and Wetzels 2005; Y. Zhang et al. 2007). After residual centering, all the VIFs are under 6, indicating that multicollinearity is not a concern. 14.2.2 Impact of Negotiation Tactics on the Likelihood of Closing Sales First, I explore the relationship between the dependent variable and the key independent variables. Second, I fit the appropriate model with mulitple packages. Third, I checked the model fit using deviance and ROC curve. Fourth, I interpret the results with log transformation. 14.2.2.1 Exploratory analysis with plots of the data and/or hypothesized relationships/ Model free evidence. library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union #Load dataset livechat &lt;- read.csv(&quot;E:/Cloud/OneDrive - University of Missouri/Webchat_Data_Stata/Webchat_201701_10_2016_10_fullcontrolidx.csv&quot;, stringsAsFactors = TRUE) livechat$AgentName &lt;- as.factor(livechat$AgentName) #convert the categorical variable into the numeric variable for the nested structure. # calculate new variables livechat$valcb_spwn &lt;- livechat$ValueCBWn/livechat$SlsPWn #remove missing values livechat &lt;- filter(livechat, Delay_max &gt;=0 &amp; valcb_spwn &gt;= 0 &amp; earlycb &gt;= 0&amp; idx != 102 &amp; idx != 371&amp;!is.na(HA_Cls)&amp;!is.na(DlvrD)&amp;!is.na(valcb_spwn)&amp;!is.na(Delay_max)&amp;!is.na(earlycb)&amp;!is.na(LSM)&amp;!is.na(EndChtD)&amp;!is.na(MCB_IND)&amp;!is.na(DrCls_IND)&amp;!is.na(CB1BWn)) # filter to plot only when the concession is 1 # https://rforhr.com/filter.html # cake &lt;- cake |&gt; dplyr::select(-temperature) #standardize variables livechat$valcb_spwn_std &lt;- scale(livechat$valcb_spwn) livechat$delay_max_std &lt;- scale(livechat$Delay_max) livechat$drt_std &lt;- scale(livechat$Drt) livechat$earlycb_std &lt;- scale(livechat$earlycb) livechat$cb1bwn_std &lt;- scale(livechat$CB1BWn) livechat$lsm_std &lt;- scale(livechat$LSM) livechat$ha_chat_count_std &lt;- scale(livechat$HA_Chat_count) livechat$earlycb_r &lt;- 100 - livechat$earlycb livechat$earlycb_r_std &lt;- scale(livechat$earlycb_r) livechat$cb1bwn_std &lt;- scale(livechat$CB1BWn) # calculate new variables - standardized livechat$i_valcb_dlvr &lt;- livechat$valcb_spwn_std * livechat$DlvrD # Create exploratory dataset livechat_concession &lt;- filter(livechat, DlvrD ==&quot;1&quot;) livechat_NOconcession &lt;- filter(livechat, DlvrD ==&quot;0&quot;) # group by the ID variable and get the count livechat_cnt &lt;- livechat %&gt;% group_by(AgtNm) %&gt;% summarise(count=n()) livechat_cnt &lt;- filter(livechat_cnt, count &gt;1) # remove the agents with only one chat to fulfill the requirement of the unbalanced panel for random and fixed effects. #Filter out the observations from the agent with less than 1 chat. livechat &lt;- livechat %&gt;% filter(AgtNm %in% livechat_cnt$AgtNm) #Exploratory analysis on the response variable -&gt; histogram X -&gt; do the plot with key variables. # seems like delay has a u shape while value affirmation is negative. par(mfrow = c(1,2)) plot(as.factor(HA_Cls) ~ delay_max_std,livechat_concession) plot(as.factor(HA_Cls) ~ delay_max_std,livechat_NOconcession) I notice that with concession, the delay tactic tends to increase the sales closing likelihood. When there is no concession, delay tactic tends to decrease the sales closing likelihood. par(mfrow = c(1,2)) plot(as.factor(HA_Cls) ~ valcb_spwn_std,livechat_concession) plot(as.factor(HA_Cls) ~ valcb_spwn_std,livechat_NOconcession) I notice that with concession, the value affirmation tactic tends to decrease the sales closing likelihood. When there is no concession, value affirmation tactic tends to have no effect on the sales closing likelihood. 14.2.2.2 Model Testing #test the VIF in pooled model #https://stackoverflow.com/questions/20281055/test-for-multicollinearity-in-panel-data-r # https://www.statology.org/variance-inflation-factor-r/ library(car) ## Loading required package: carData ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode library(plm) ## ## Attaching package: &#39;plm&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, lag, lead form &lt;- HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + DlvrD*delay_max_std + DlvrD*valcb_spwn_std + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + team_d HedStata_pool &lt;- plm(form, livechat, model = &quot;pooling&quot;, index = &quot;AgentName&quot;, family = &quot;binomial&quot;) vif(HedStata_pool) ## DlvrD delay_max_std valcb_spwn_std ## 1.632637 10.754449 3.305531 ## drt_std earlycb_r_std MCB_IND ## 2.392625 2.289617 1.137726 ## cb1bwn_std EndChtD DrCls_IND ## 2.616199 1.036700 1.129779 ## lsm_std DnyD ha_chat_count_std ## 1.304876 1.095309 2.203606 ## team_d DlvrD:delay_max_std DlvrD:valcb_spwn_std ## 2.129254 9.525217 2.747582 Since the VIFs are high for delay tactic and its interaction term with Concession tactic, I adopt the residual centering approach. #Residual centering to reduce the VIF lm_delay_dlvrd &lt;- lm(delay_max_std ~ DlvrD, livechat) livechat$delay_max_std_rc &lt;- residuals(lm_delay_dlvrd) livechat$i_delay_max_std_rc_dlvrd &lt;- livechat$delay_max_std_rc * livechat$DlvrD lm_i_delay_max_std_rc_dlvrd &lt;- lm(i_delay_max_std_rc_dlvrd ~ delay_max_std_rc + DlvrD, livechat) livechat$i_delay_max_std_rc_dlvrd_rc &lt;- residuals(lm_i_delay_max_std_rc_dlvrd) I then run the same hypothesized model with multiple packages to cross-validate the results. livechat_model &lt;- HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + i_delay_max_std_rc_dlvrd_rc + i_valcb_dlvr + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + team_d library(lme4) ## Loading required package: Matrix # glmer package livechat$AgentName &lt;- as.numeric(as.factor(livechat$AgentName)) fm1 &lt;- glmer(HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + i_delay_max_std_rc_dlvrd_rc + i_valcb_dlvr + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + team_d + (1|AgentName), livechat, family = binomial(link=&quot;logit&quot;)) summary(fm1) ## Generalized linear mixed model fit by maximum likelihood (Laplace ## Approximation) [glmerMod] ## Family: binomial ( logit ) ## Formula: ## HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + i_delay_max_std_rc_dlvrd_rc + ## i_valcb_dlvr + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + ## EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + ## team_d + (1 | AgentName) ## Data: livechat ## ## AIC BIC logLik deviance df.resid ## 863.8 946.0 -414.9 829.8 913 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.8241 -0.5277 -0.2577 0.5647 8.2472 ## ## Random effects: ## Groups Name Variance Std.Dev. ## AgentName (Intercept) 0.1225 0.3499 ## Number of obs: 930, groups: AgentName, 58 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -2.32147 0.42992 -5.400 6.67e-08 *** ## DlvrD 0.38590 0.26491 1.457 0.145190 ## delay_max_std -0.19081 0.11335 -1.683 0.092310 . ## valcb_spwn_std -0.06613 0.20191 -0.328 0.743274 ## i_delay_max_std_rc_dlvrd_rc 1.18547 0.43620 2.718 0.006573 ** ## i_valcb_dlvr -0.75076 0.25341 -2.963 0.003050 ** ## drt_std -0.18079 0.12220 -1.479 0.139026 ## earlycb_r_std 1.43035 0.16500 8.669 &lt; 2e-16 *** ## MCB_IND -0.11749 0.20685 -0.568 0.570048 ## cb1bwn_std 0.99563 0.16626 5.988 2.12e-09 *** ## EndChtD -1.33007 0.35797 -3.716 0.000203 *** ## DrCls_IND 1.07907 0.24102 4.477 7.57e-06 *** ## lsm_std 0.31074 0.11205 2.773 0.005552 ** ## DnyD -0.16653 0.19821 -0.840 0.400807 ## ha_chat_count_std 0.31643 0.14081 2.247 0.024623 * ## team_d -0.07721 0.36087 -0.214 0.830573 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation matrix not shown by default, as p = 16 &gt; 12. ## Use print(x, correlation=TRUE) or ## vcov(x) if you need it ## optimizer (Nelder_Mead) convergence code: 0 (OK) ## Model failed to converge with max|grad| = 0.00302405 (tol = 0.002, component 1) #library(MASS) #model42 = glmmPQL(Agent_inSe ~ Sum_Scar*FU_1min + Sum_Value*FU_1min # + Sum_SalesClose + log(wn) +LSM, # random = ~ 1|ID, data = data_survey, family = binomial) #??? what&#39;s the sim ~1 why not 1|ID library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select glmmPQL_re &lt;- glmmPQL(livechat_model, random = ~ 1|AgentName, data = livechat, family = binomial) ## iteration 1 summary(glmmPQL_re) ## Linear mixed-effects model fit by maximum likelihood ## Data: livechat ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | AgentName ## (Intercept) Residual ## StdDev: 0.0001919795 1.026964 ## ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + i_delay_max_std_rc_dlvrd_rc + i_valcb_dlvr + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + team_d ## Value Std.Error DF t-value p-value ## (Intercept) -2.2063583 0.3491458 858 -6.319304 0.0000 ## DlvrD 0.3848989 0.2714842 858 1.417758 0.1566 ## delay_max_std -0.1909658 0.1161801 858 -1.643705 0.1006 ## valcb_spwn_std -0.0439477 0.2057154 858 -0.213634 0.8309 ## i_delay_max_std_rc_dlvrd_rc 1.1635117 0.4498096 858 2.586676 0.0099 ## i_valcb_dlvr -0.7557323 0.2600897 858 -2.905660 0.0038 ## drt_std -0.1834711 0.1250643 858 -1.467014 0.1427 ## earlycb_r_std 1.4201864 0.1688229 858 8.412284 0.0000 ## MCB_IND -0.1123936 0.2117478 858 -0.530790 0.5957 ## cb1bwn_std 0.9892010 0.1703045 858 5.808424 0.0000 ## EndChtD -1.3023946 0.3651669 858 -3.566573 0.0004 ## DrCls_IND 1.0558608 0.2453534 858 4.303428 0.0000 ## lsm_std 0.3102127 0.1143444 858 2.712969 0.0068 ## DnyD -0.1746284 0.2025658 858 -0.862082 0.3889 ## ha_chat_count_std 0.3109155 0.1369970 858 2.269506 0.0235 ## team_d -0.1510360 0.2614313 56 -0.577727 0.5658 ## Correlation: ## (Intr) DlvrD dly_m_ vlcb__ i_____ i_vlc_ drt_st ## DlvrD -0.577 ## delay_max_std 0.156 -0.264 ## valcb_spwn_std -0.360 0.404 -0.126 ## i_delay_max_std_rc_dlvrd_rc -0.162 0.163 -0.257 0.152 ## i_valcb_dlvr 0.313 -0.134 -0.061 -0.758 -0.158 ## drt_std 0.027 0.083 -0.409 0.101 -0.063 0.034 ## earlycb_r_std -0.032 -0.039 -0.140 0.052 0.170 -0.089 -0.309 ## MCB_IND -0.115 -0.089 -0.114 -0.012 -0.036 -0.031 -0.071 ## cb1bwn_std -0.059 0.029 0.047 0.118 0.172 -0.103 -0.467 ## EndChtD -0.089 0.006 0.015 0.008 -0.042 -0.009 0.024 ## DrCls_IND -0.574 -0.024 0.090 0.086 0.028 -0.099 -0.089 ## lsm_std -0.016 0.018 -0.066 -0.015 -0.004 0.000 -0.170 ## DnyD -0.260 0.091 -0.055 0.021 -0.019 -0.001 -0.035 ## ha_chat_count_std 0.236 0.052 0.113 -0.019 0.014 -0.033 0.064 ## team_d -0.364 -0.040 -0.061 -0.008 0.020 -0.046 0.031 ## erly__ MCB_IN cb1bw_ EndChD DC_IND lsm_st DnyD ## DlvrD ## delay_max_std ## valcb_spwn_std ## i_delay_max_std_rc_dlvrd_rc ## i_valcb_dlvr ## drt_std ## earlycb_r_std ## MCB_IND -0.040 ## cb1bwn_std 0.746 0.051 ## EndChtD 0.008 0.014 -0.027 ## DrCls_IND -0.072 0.006 -0.048 0.013 ## lsm_std -0.122 0.019 -0.172 -0.087 -0.023 ## DnyD -0.067 -0.107 0.021 0.060 0.078 -0.067 ## ha_chat_count_std 0.030 -0.065 0.011 0.001 -0.025 0.013 -0.117 ## team_d -0.004 0.059 -0.012 -0.001 -0.026 -0.031 0.053 ## h_ch__ ## DlvrD ## delay_max_std ## valcb_spwn_std ## i_delay_max_std_rc_dlvrd_rc ## i_valcb_dlvr ## drt_std ## earlycb_r_std ## MCB_IND ## cb1bwn_std ## EndChtD ## DrCls_IND ## lsm_std ## DnyD ## ha_chat_count_std ## team_d -0.703 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -6.4283299 -0.5193227 -0.2582833 0.5676998 7.8729503 ## ## Number of Observations: 930 ## Number of Groups: 58 # https://stackoverflow.com/questions/29764983/r-encode-character-variables-into-numeric # encode in stata will translate string into numeric. in R, two steps are needed. library(pglm) ## Loading required package: maxLik ## Loading required package: miscTools ## ## Please cite the &#39;maxLik&#39; package as: ## Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1. ## ## If you have questions, suggestions, or comments regarding the &#39;maxLik&#39; package, please use a forum or &#39;tracker&#39; at maxLik&#39;s R-Forge site: ## https://r-forge.r-project.org/projects/maxlik/ pglm_re &lt;- pglm(form, livechat, model = &quot;random&quot;, index = &quot;AgentName&quot;, random.models = c(&quot;within&quot;, &quot;between&quot;), family = &quot;binomial&quot;) summary(pglm_re) ## -------------------------------------------- ## Maximum Likelihood estimation ## Newton-Raphson maximisation, 8 iterations ## Return code 1: gradient close to zero (gradtol) ## Log-Likelihood: -414.9473 ## 17 free parameters ## Estimates: ## Estimate Std. error t value Pr(&gt; t) ## (Intercept) -2.583e+00 3.855e-01 -6.699 2.09e-11 *** ## DlvrD 7.451e-01 3.135e-01 2.377 0.01746 * ## delay_max_std -1.227e+00 4.295e-01 -2.858 0.00427 ** ## valcb_spwn_std -4.394e-02 1.986e-01 -0.221 0.82487 ## drt_std -1.835e-01 1.207e-01 -1.520 0.12859 ## earlycb_r_std 1.420e+00 1.630e-01 8.714 &lt; 2e-16 *** ## MCB_IND -1.124e-01 2.044e-01 -0.550 0.58243 ## cb1bwn_std 9.892e-01 1.644e-01 6.017 1.78e-09 *** ## EndChtD -1.302e+00 3.525e-01 -3.695 0.00022 *** ## DrCls_IND 1.056e+00 2.368e-01 4.458 8.27e-06 *** ## lsm_std 3.102e-01 1.104e-01 2.810 0.00495 ** ## DnyD -1.746e-01 1.955e-01 -0.893 0.37183 ## ha_chat_count_std 3.109e-01 1.322e-01 2.351 0.01872 * ## team_d -1.510e-01 2.524e-01 -0.598 0.54951 ## DlvrD:delay_max_std 1.164e+00 4.342e-01 2.680 0.00737 ** ## DlvrD:valcb_spwn_std -7.557e-01 2.511e-01 -3.010 0.00261 ** ## sigma -1.565e-08 2.202e-01 0.000 1.00000 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## -------------------------------------------- #Test in Stata # https://stackoverflow.com/questions/59923956/trying-to-reproduce-xtreg-in-stata-with-plm-in-r #plm vs. stata: https://cran.r-project.org/web/packages/plm/vignettes/A_plmPackage.html # https://cran.r-project.org/web/packages/plm/vignettes/B_plmFunction.html library(RStata) options(&quot;RStata.StataPath&quot; = &quot;\\&quot;E:\\\\Cloud\\\\OneDrive - University of Missouri\\\\Program\\\\Stata 16\\\\StataMP-64\\&quot;&quot;) options(&quot;RStata.StataVersion&quot; = 16) # Stata fe stata_do1 &lt;- &#39; xtset AgentName xtlogit HA_Cls DlvrD delay_max_std valcb_spwn_std i_delay_max_std_rc_dlvrd_rc i_valcb_dlvr drt_std earlycb_r_std MCB_IND cb1bwn_std EndChtD DrCls_IND lsm_std DnyD ha_chat_count_std team_d, re vce(cluster AgentName) estat ic estimates store re estimates table, star(.1 .05 .01) collin DlvrD delay_max_std valcb_spwn_std i_delay_max_std_rc_dlvrd_rc i_valcb_dlvr drt_std earlycb_r_std MCB_IND cb1bwn_std EndChtD DrCls_IND lsm_std DnyD ha_chat_count_std team_d &#39; stata(stata_do1, data.out = TRUE, data.in = livechat) ## . ## . xtset AgentName ## panel variable: AgentName (unbalanced) ## . xtlogit HA_Cls DlvrD delay_max_std valcb_spwn_std i_delay_max_std_rc_dlvrd_r ## &gt; c i_valcb_dlvr drt_std earlycb_r_std MCB_IND cb1bwn_std EndChtD DrCls_IND lsm ## &gt; _std DnyD ha_chat_count_std team_d, re vce(cluster AgentName) ## ## Fitting comparison model: ## ## Iteration 0: log pseudolikelihood = -561.16066 ## Iteration 1: log pseudolikelihood = -426.71104 ## Iteration 2: log pseudolikelihood = -415.11417 ## Iteration 3: log pseudolikelihood = -414.94751 ## Iteration 4: log pseudolikelihood = -414.94733 ## Iteration 5: log pseudolikelihood = -414.94733 ## ## Fitting full model: ## ## tau = 0.0 log pseudolikelihood = -414.94733 ## tau = 0.1 log pseudolikelihood = -415.03696 ## ## Iteration 0: log pseudolikelihood = -414.99631 ## Iteration 1: log pseudolikelihood = -414.89504 ## Iteration 2: log pseudolikelihood = -414.89389 ## Iteration 3: log pseudolikelihood = -414.89389 ## ## Calculating robust standard errors: ## ## Random-effects logistic regression Number of obs = 930 ## Group variable: AgentName Number of groups = 58 ## ## Random effects u_i ~ Gaussian Obs per group: ## min = 2 ## avg = 16.0 ## max = 351 ## ## Integration method: mvaghermite Integration pts. = 12 ## ## Wald chi2(15) = 255.05 ## Log pseudolikelihood = -414.89389 Prob &gt; chi2 = 0.0000 ## ## (Std. Err. adjusted for 58 clusters in AgentName) ## ------------------------------------------------------------------------------ ## | Robust ## HA_Cls | Coef. Std. Err. z P&gt;|z| [95% Conf. Interval] ## -------------+---------------------------------------------------------------- ## DlvrD | .385579 .3158987 1.22 0.222 -.2335709 1.004729 ## delay_max_~d | -.1906206 .1201732 -1.59 0.113 -.4261558 .0449146 ## valcb_spwn~d | -.0672466 .1878915 -0.36 0.720 -.4355073 .301014 ## i_delay_ma~c | 1.186531 .4698723 2.53 0.012 .2655984 2.107464 ## i_valcb_dlvr | -.7505258 .2130321 -3.52 0.000 -1.168061 -.3329906 ## drt_std | -.1806803 .104897 -1.72 0.085 -.3862746 .0249139 ## earlycb_r_~d | 1.430746 .2075747 6.89 0.000 1.023907 1.837585 ## MCB_IND | -.117857 .1653891 -0.71 0.476 -.4420137 .2062997 ## cb1bwn_std | .9958436 .169694 5.87 0.000 .6632495 1.328438 ## EndChtD | -1.33118 .2779074 -4.79 0.000 -1.875869 -.7864917 ## DrCls_IND | 1.080619 .1671432 6.47 0.000 .7530239 1.408213 ## lsm_std | .3107507 .0897694 3.46 0.001 .1348059 .4866956 ## DnyD | -.1660678 .2234209 -0.74 0.457 -.6039646 .2718291 ## ha_chat_co~d | .3167114 .0817124 3.88 0.000 .1565581 .4768648 ## team_d | -.0749339 .2836272 -0.26 0.792 -.630833 .4809652 ## _cons | -2.32591 .3218474 -7.23 0.000 -2.956719 -1.695101 ## -------------+---------------------------------------------------------------- ## /lnsig2u | -2.044675 2.012963 -5.990009 1.900659 ## -------------+---------------------------------------------------------------- ## sigma_u | .359753 .3620846 .0500364 2.586561 ## rho | .0378506 .0733079 .0007604 .6703594 ## ------------------------------------------------------------------------------ ## . estat ic ## ## Akaike&#39;s information criterion and Bayesian information criterion ## ## ----------------------------------------------------------------------------- ## Model | N ll(null) ll(model) df AIC BIC ## -------------+--------------------------------------------------------------- ## . | 930 . -414.8939 17 863.7878 945.9859 ## ----------------------------------------------------------------------------- ## Note: BIC uses N = number of observations. See [R] BIC note. ## . estimates store re ## . estimates table, star(.1 .05 .01) ## ## ------------------------------ ## Variable | re ## -------------+---------------- ## HA_Cls | ## DlvrD | .38557905 ## delay_max_~d | -.19062062 ## valcb_spwn~d | -.06724665 ## i_delay_ma~c | 1.1865311** ## i_valcb_dlvr | -.75052577*** ## drt_std | -.18068031* ## earlycb_r_~d | 1.4307463*** ## MCB_IND | -.11785698 ## cb1bwn_std | .99584358*** ## EndChtD | -1.3311803*** ## DrCls_IND | 1.0806185*** ## lsm_std | .31075074*** ## DnyD | -.16606776 ## ha_chat_co~d | .31671145*** ## team_d | -.07493386 ## _cons | -2.3259101*** ## -------------+---------------- ## /lnsig2u | -2.0446754 ## ------------------------------ ## legend: * p&lt;.1; ** p&lt;.05; *** p&lt;.01 ## . collin DlvrD delay_max_std valcb_spwn_std i_delay_max_std_rc_dlvrd_rc i_valcb ## &gt; _dlvr drt_std earlycb_r_std MCB_IND cb1bwn_std EndChtD DrCls_IND lsm_std DnyD ## &gt; ha_chat_count_std team_d ## (obs=930) ## ## Collinearity Diagnostics ## ## SQRT R- ## Variable VIF VIF Tolerance Squared ## ---------------------------------------------------- ## DlvrD 1.40 1.18 0.7130 0.2870 ## delay_max_std 1.89 1.37 0.5291 0.4709 ## valcb_spwn_std 3.31 1.82 0.3025 0.6975 ## i_delay_max_std_rc_dlvrd_rc 1.04 1.02 0.9651 0.0349 ## i_valcb_dlvr 2.75 1.66 0.3640 0.6360 ## drt_std 2.39 1.55 0.4180 0.5820 ## earlycb_r_std 2.29 1.51 0.4368 0.5632 ## MCB_IND 1.14 1.07 0.8789 0.1211 ## cb1bwn_std 2.62 1.62 0.3822 0.6178 ## EndChtD 1.04 1.02 0.9646 0.0354 ## DrCls_IND 1.13 1.06 0.8851 0.1149 ## lsm_std 1.30 1.14 0.7664 0.2336 ## DnyD 1.10 1.05 0.9130 0.0870 ## ha_chat_count_std 2.20 1.48 0.4538 0.5462 ## team_d 2.13 1.46 0.4696 0.5304 ## ---------------------------------------------------- ## Mean VIF 1.85 ## ## Cond ## Eigenval Index ## --------------------------------- ## 1 4.1064 1.0000 ## 2 2.3380 1.3253 ## 3 2.1128 1.3941 ## 4 1.3769 1.7269 ## 5 1.0991 1.9329 ## 6 0.9766 2.0505 ## 7 0.8585 2.1871 ## 8 0.6731 2.4699 ## 9 0.6171 2.5796 ## 10 0.5690 2.6865 ## 11 0.3779 3.2964 ## 12 0.2715 3.8889 ## 13 0.2181 4.3391 ## 14 0.1967 4.5694 ## 15 0.1462 5.3007 ## 16 0.0621 8.1343 ## --------------------------------- ## Condition Number 8.1343 ## Eigenvalues &amp; Cond Index computed from scaled raw sscp (w/ intercept) ## Det(correlation matrix) 0.0148 library(MASS) glmmPQL_r &lt;- glmmPQL(livechat_model, random = ~ 1|AgentName, data = livechat, family = binomial) ## iteration 1 summary(glmmPQL_r) ## Linear mixed-effects model fit by maximum likelihood ## Data: livechat ## AIC BIC logLik ## NA NA NA ## ## Random effects: ## Formula: ~1 | AgentName ## (Intercept) Residual ## StdDev: 0.0001919795 1.026964 ## ## Variance function: ## Structure: fixed weights ## Formula: ~invwt ## Fixed effects: HA_Cls ~ DlvrD + delay_max_std + valcb_spwn_std + i_delay_max_std_rc_dlvrd_rc + i_valcb_dlvr + drt_std + earlycb_r_std + MCB_IND + cb1bwn_std + EndChtD + DrCls_IND + lsm_std + DnyD + ha_chat_count_std + team_d ## Value Std.Error DF t-value p-value ## (Intercept) -2.2063583 0.3491458 858 -6.319304 0.0000 ## DlvrD 0.3848989 0.2714842 858 1.417758 0.1566 ## delay_max_std -0.1909658 0.1161801 858 -1.643705 0.1006 ## valcb_spwn_std -0.0439477 0.2057154 858 -0.213634 0.8309 ## i_delay_max_std_rc_dlvrd_rc 1.1635117 0.4498096 858 2.586676 0.0099 ## i_valcb_dlvr -0.7557323 0.2600897 858 -2.905660 0.0038 ## drt_std -0.1834711 0.1250643 858 -1.467014 0.1427 ## earlycb_r_std 1.4201864 0.1688229 858 8.412284 0.0000 ## MCB_IND -0.1123936 0.2117478 858 -0.530790 0.5957 ## cb1bwn_std 0.9892010 0.1703045 858 5.808424 0.0000 ## EndChtD -1.3023946 0.3651669 858 -3.566573 0.0004 ## DrCls_IND 1.0558608 0.2453534 858 4.303428 0.0000 ## lsm_std 0.3102127 0.1143444 858 2.712969 0.0068 ## DnyD -0.1746284 0.2025658 858 -0.862082 0.3889 ## ha_chat_count_std 0.3109155 0.1369970 858 2.269506 0.0235 ## team_d -0.1510360 0.2614313 56 -0.577727 0.5658 ## Correlation: ## (Intr) DlvrD dly_m_ vlcb__ i_____ i_vlc_ drt_st ## DlvrD -0.577 ## delay_max_std 0.156 -0.264 ## valcb_spwn_std -0.360 0.404 -0.126 ## i_delay_max_std_rc_dlvrd_rc -0.162 0.163 -0.257 0.152 ## i_valcb_dlvr 0.313 -0.134 -0.061 -0.758 -0.158 ## drt_std 0.027 0.083 -0.409 0.101 -0.063 0.034 ## earlycb_r_std -0.032 -0.039 -0.140 0.052 0.170 -0.089 -0.309 ## MCB_IND -0.115 -0.089 -0.114 -0.012 -0.036 -0.031 -0.071 ## cb1bwn_std -0.059 0.029 0.047 0.118 0.172 -0.103 -0.467 ## EndChtD -0.089 0.006 0.015 0.008 -0.042 -0.009 0.024 ## DrCls_IND -0.574 -0.024 0.090 0.086 0.028 -0.099 -0.089 ## lsm_std -0.016 0.018 -0.066 -0.015 -0.004 0.000 -0.170 ## DnyD -0.260 0.091 -0.055 0.021 -0.019 -0.001 -0.035 ## ha_chat_count_std 0.236 0.052 0.113 -0.019 0.014 -0.033 0.064 ## team_d -0.364 -0.040 -0.061 -0.008 0.020 -0.046 0.031 ## erly__ MCB_IN cb1bw_ EndChD DC_IND lsm_st DnyD ## DlvrD ## delay_max_std ## valcb_spwn_std ## i_delay_max_std_rc_dlvrd_rc ## i_valcb_dlvr ## drt_std ## earlycb_r_std ## MCB_IND -0.040 ## cb1bwn_std 0.746 0.051 ## EndChtD 0.008 0.014 -0.027 ## DrCls_IND -0.072 0.006 -0.048 0.013 ## lsm_std -0.122 0.019 -0.172 -0.087 -0.023 ## DnyD -0.067 -0.107 0.021 0.060 0.078 -0.067 ## ha_chat_count_std 0.030 -0.065 0.011 0.001 -0.025 0.013 -0.117 ## team_d -0.004 0.059 -0.012 -0.001 -0.026 -0.031 0.053 ## h_ch__ ## DlvrD ## delay_max_std ## valcb_spwn_std ## i_delay_max_std_rc_dlvrd_rc ## i_valcb_dlvr ## drt_std ## earlycb_r_std ## MCB_IND ## cb1bwn_std ## EndChtD ## DrCls_IND ## lsm_std ## DnyD ## ha_chat_count_std ## team_d -0.703 ## ## Standardized Within-Group Residuals: ## Min Q1 Med Q3 Max ## -6.4283299 -0.5193227 -0.2582833 0.5676998 7.8729503 ## ## Number of Observations: 930 ## Number of Groups: 58 I test the prediction performance through accuracy and ROC. Plm cannot be run with the predict function. Thus, I choose glmmPQL instead which gives the similar results. # predictive accuracy + ROC # plm as model: https://www.princeton.edu/~otorres/Panel101R.pdf #plm not working??? with the prdict function #https://stackoverflow.com/questions/38623624/usemethodpredict-no-applicable-method-for-predict-applied-to-an-object-o library(caret) ## Loading required package: ggplot2 ## Loading required package: lattice PredProb &lt;- predict(glmmPQL_r,type=&quot;response&quot;) Preds &lt;- ifelse(PredProb &gt; 0.5, 1, 0) tab &lt;- table(Preds,obs=livechat$HA_Cls) tab ## obs ## Preds 0 1 ## 0 588 120 ## 1 71 151 print((tab[2, 1] + tab[1, 2])/sum(tab)) ## [1] 0.2053763 # Average closing rate or # of 1s. mean(livechat$HA_Cls) ## [1] 0.2913978 The misclassification rate is 20%. It is better than the 29% random guessing. I then check the Area under the curve for ROC to show discriminant performance. I test multiple cut off points since there is a trade off between sensitivity and specificity. max(auc_r) ## [1] 0.7730067 #??? how to pick the index of the highest value? # filter: https://www.statology.org/dplyr-filter-not-in/ auc_r[297] ## [1] 0.7692131 thresh[297] ## [1] 0.2983333 #https://www.statology.org/auc-in-r/ library(pROC) Preds_max &lt;- ifelse(PredProb &gt; 0.3, 1, 0) auc(livechat$HA_Cls, Preds_max) ## Setting levels: control = 0, case = 1 ## Setting direction: controls &lt; cases ## Area under the curve: 0.7692 The area under the curve is 0.77 which is higher than the threshold of 0.7. Thus, the discriminant performance is satisfied. Finally, I check the residuals. # residual plot library(dplyr) plot_bin &lt;- function(Y, X, bins = 100, return.DF = FALSE){ Y_Name &lt;- deparse(substitute(Y)) X_Name &lt;- deparse(substitute(X)) Binned_Plot &lt;- data.frame(Plot_Y = Y, Plot_X = X) Binned_Plot$bin &lt;- cut(Binned_Plot$Plot_X,breaks = bins) |&gt; as.numeric() Binned_Plot_summary &lt;- Binned_Plot |&gt; group_by(bin) |&gt; summarise(Y_ave = mean(Plot_Y), X_ave = mean(Plot_X), Count = n()) |&gt; as.data.frame() plot(y = Binned_Plot_summary$Y_ave, x = Binned_Plot_summary$X_ave, ylab = Y_Name, xlab = X_Name) if(return.DF) return(Binned_Plot_summary) } plot_bin(Y = residuals(glmmPQL_r), X = predict(glmmPQL_r,type=&quot;response&quot;), bins = 200) #??? the variance is so much bigger close to 1? on a few observations. what does it mean? predict 1 but 0??? The result plots show that most of the range the prediction is good except when it is very close to 1. Thus, the model fits the data well. 14.2.2.3 Interpretation of the fixed effect coefficients # Interpretation ??? probability goes above 1? increase by 76%? #simple effect of concession tactic print(exp(0.3848989)/(1+exp(0.3848989))) ## [1] 0.5950541 # interaction effect when used with delay 1SD print(exp(1.1635117)/(1+exp(1.1635117))) ## [1] 0.7619702 # interaction effect when used with value affirmation 1SD print(exp(-0.7557323)/(1+exp(-0.7557323))) ## [1] 0.3195735 The results show that concession tactics increases the sales closing likelihood by 60% when everything else is at their mean level (i.e., x = 0). The result is not significant (p&gt;0.1) when not considered the interactions with delay and value affirmation tactics (i.e., at the mean level of delay and value affirmation tactics). When the concession is used with the delay tactic (1 SD+), the sales closing likelihood further increases by 76% (p &lt; 0.05). When the concession tactic is used with value affirmation tactic (1 SD+), the sales closing likelihood decreases by 32% (p &lt; 0.05). #??? Test using HA team as instrument 14.2.3 Research Implications Retailers intended live chat to be an information portal, but it became a bargain hunt that empowers consumers to sweeten the deal. salespeople need to gain a nuanced understanding of how to close the sale with scarcity mindset consumers. When cues do not fit consumers’ information-processing mode, the cues can backfire. Thus, the adage less is more applicable for live-chat negotiation. I demonstrated that concurrent use of the concession tactic and the delay tactic is more effective. In contrast, concurrent use with the value affirmation tactic can even decrease the likelihood of closing sales, despite more efforts exerted by salespeople, since the tactic does not fit the heuristic processing of information activated by the concession tactic. Thus, the business may want salespeople to either use the value affirmation tactic throughout the chat or the concession tactic, but not both. #Q&amp;A #??? a) residual centering then how to interpret or show the results look simiar and use uncentered? otherwise, how to solve multi-corr. b) prediction accuracy cut-off ROC c) can I test the squared relationship when the corr is high? d) optional: instrument. on the effect on the second level? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
